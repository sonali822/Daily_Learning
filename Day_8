Vue Style Guide -->

Multi-word component names ESSENTIAL
Component names should always be multi-word, except for root App components, and built-in components provided by Vue, such as <transition> or <component>.

This prevents conflicts with existing and future HTML elements, since all HTML elements are a single word.



Component data ESSENTIAL
Component data must be a function.

When using the data property on a component (i.e. anywhere except on new Vue), the value must be a function that returns an object.


Prop definitions ESSENTIAL
Prop definitions should be as detailed as possible.

In committed code, prop definitions should always be as detailed as possible, specifying at least type(s).

Keyed v-for ESSENTIAL
Always use key with v-for.

key with v-for is always required on components, in order to maintain internal component state down the subtree. 
Even for elements though, it’s a good practice to maintain predictable behavior, such as object constancy in animations.


Avoid v-if with v-forESSENTIAL
Never use v-if on the same element as v-for.

There are two common cases where this can be tempting:

To filter items in a list (e.g. v-for="user in users" v-if="user.isActive"). 
In these cases, replace users with a new computed property that returns your filtered list (e.g. activeUsers).

To avoid rendering a list if it should be hidden (e.g. v-for="user in users" v-if="shouldShowUsers"). 
In these cases, move the v-if to a container element (e.g. ul, ol).

Private property namesESSENTIAL
Use module scoping to keep private functions inaccessible from the outside. If that’s not possible, always use the $_ prefix for custom private properties 
in a plugin, mixin, etc that should not be considered public API. 
Then to avoid conflicts with code by other authors, also include a named scope (e.g. $_yourPluginName_).


Component filesSTRONGLY RECOMMENDED
Whenever a build system is available to concatenate files, each component should be in its own file.

This helps you to more quickly find a component when you need to edit it or review how to use it.

Single-file component filename casingSTRONGLY RECOMMENDED
Filenames of single-file components should either be always PascalCase or always kebab-case.

PascalCase works best with autocompletion in code editors, as it’s consistent with how we reference components in JS(X) and templates,
wherever possible. However, mixed case filenames can sometimes create issues on case-insensitive file systems, 
which is why kebab-case is also perfectly acceptable.


Base component namesSTRONGLY RECOMMENDED
Base components (a.k.a. presentational, dumb, or pure components) that apply app-specific styling and conventions should all begin with a specific prefix, 
such as Base, App, or V.

Tightly coupled component namesSTRONGLY RECOMMENDED
Child components that are tightly coupled with their parent should include the parent component name as a prefix.

If a component only makes sense in the context of a single parent component, that relationship should be evident in its name. 
Since editors typically organize files alphabetically, 
this also keeps these related files next to each other.


Order of words in component namesSTRONGLY RECOMMENDED
Component names should start with the highest-level (often most general) words and end with descriptive modifying words.


Self-closing componentsSTRONGLY RECOMMENDED
Components with no content should be self-closing in single-file components, string templates, and JSX - but never in DOM templates.

Components that self-close communicate that they not only have no content, but are meant to have no content. 
It’s the difference between a blank page in a book and one labeled “This page intentionally left blank.” Your code is also cleaner without the unnecessary closing tag.

Unfortunately, HTML doesn’t allow custom elements to be self-closing - only official “void” elements. 
That’s why the strategy is only possible when Vue’s template compiler can reach the template before the DOM, then serve the DOM spec-compliant HTML.

Bad
<!-- In single-file components, string templates, and JSX -->
<MyComponent></MyComponent>
<!-- In DOM templates -->
<my-component/>
Good
<!-- In single-file components, string templates, and JSX -->
<MyComponent/>
<!-- In DOM templates -->
<my-component></my-component>



Component name casing in templatesSTRONGLY RECOMMENDED
In most projects, component names should always be PascalCase in single-file components and string templates - but kebab-case in DOM templates.

PascalCase has a few advantages over kebab-case:

Editors can autocomplete component names in templates, because PascalCase is also used in JavaScript.
<MyComponent> is more visually distinct from a single-word HTML element than <my-component>, because there are two character differences (the two capitals),
rather than just one (a hyphen).
If you use any non-Vue custom elements in your templates, such as a web component, PascalCase ensures that your Vue components remain distinctly visible.
Unfortunately, due to HTML’s case insensitivity, DOM templates must still use kebab-case.

Also note that if you’ve already invested heavily in kebab-case, consistency with HTML conventions and being able to use the same casing across all your projects 
may be more important than the advantages listed above. In those cases, 
using kebab-case everywhere is also acceptable.




Full-word component namesSTRONGLY RECOMMENDED
Component names should prefer full words over abbreviations.

The autocompletion in editors make the cost of writing longer names very low, while the clarity they provide is invaluable. Uncommon abbreviations, 
in particular, should always be avoided.

Bad
components/
|- SdSettings.vue
|- UProfOpts.vue
Good
components/
|- StudentDashboardSettings.vue
|- UserProfileOptions.vue


Multi-attribute elementsSTRONGLY RECOMMENDED
Elements with multiple attributes should span multiple lines, with one attribute per line.

In JavaScript, splitting objects with multiple properties over multiple lines is widely considered a good convention, because it’s much easier to read.
Our templates and JSX deserve the same consideration.

Bad
<img src="https://vuejs.org/images/logo.png" alt="Vue Logo">
<MyComponent foo="a" bar="b" baz="c"/>
Good
<img
  src="https://vuejs.org/images/logo.png"
  alt="Vue Logo"
>
<MyComponent
  foo="a"
  bar="b"
  baz="c"
/>


Quoted attribute valuesSTRONGLY RECOMMENDED
Non-empty HTML attribute values should always be inside quotes (single or double, whichever is not used in JS).

While attribute values without any spaces are not required to have quotes in HTML, this practice often leads to avoiding spaces, making attribute values 
less readable.


